"""
Задача: Проверка свойства дерева поиска.
Проверить, является ли данное двоичное дерево деревом поиска.

Вы тестируете реализацию двоичного дерева поиска. У вас уже написан код, который ищет,
добавляет и удаляет ключи, а также выводит внутреннее состояние структуры данных после
каждой операции. Вам осталось проверить, что в каждый момент дерево остаётся корректным
деревом поиска. Другими словами, вы хотите проверить, что для дерева корректно работает
поиск, если ключ есть в дереве, то процедура поиска его обязательно найдёт,
если ключа нет — то не найдёт.

Формат входа.
Первая строка содержит число вершин n.
Вершины дерева пронумерованы числами от 0 до n−1. Вершина 0 является корнем.
Каждая из следующих n строк содержит информацию о вершинах 0, 1, ..., n−1: i-я строка
задаёт числа keyi, lefti и righti, где:
keyi — ключ вершины i,
lefti — индекс левого сына вершины i,
righti — индекс правого сына вершины i.
Если у вершины i нет одного или обоих сыновей, соответствующее значение равно −1.

Формат выхода.
Выведите «CORRECT», если дерево является корректным деревом поиска, и «INCORRECT»
в противном случае.

Ограничения. 0 ≤ n ≤ 10^5; −2^31 < keyi < 2^31 − 1; −1 ≤ lefti, righti ≤ n − 1.
Гарантируется, что вход задаёт корректное двоичное дерево в частности,
если lefti != −1 и righti != −1, то lefti != righti, то никакая вершина не является
сыном двух вершин;
каждая вершина является потомком корня.

Sample Input:
3
2 1 2
1 -1 -1
3 -1 -1
Sample Output:
CORRECT

Sample Input:
3
1 1 2
2 -1 -1
3 -1 -1
Sample Output:
INCORRECT
"""

def in_order(i, tree, res):
    """
    произвести рекурсивный вызов для v.left,
    напечатать v.key,
    произвести рекурсивный вызов для v.right.
    """
    key, left, right = tree[i]

    if left != -1:
        in_order(left, tree, res)

    res.append(key)

    if right != -1:
        in_order(right, tree, res)

    return res


import sys

n = int(input())
tree, res = [], []

if n == 0:
    print("CORRECT")
else:
    if n > 900:
        sys.setrecursionlimit(n + 1)

    for i in range(n):
        tree += [list(map(int, input().split()))]

    print(["INCORRECT", "CORRECT"][in_order(0, tree, res) == sorted(res)])



